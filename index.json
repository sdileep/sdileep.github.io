[{"categories":["Infrastructure"],"content":"This article describes how to structure a repository to maintain multi-environment, multi-region infrastructure in AWS using Terraform.","date":"2020-01-02","objectID":"/terraform-setup-multi-environment-region/","tags":["Devops","Terraform","AWS"],"title":"Maintain multi-environment, multi-region infrastructure on AWS using Terraform","uri":"/terraform-setup-multi-environment-region/"},{"categories":["Infrastructure"],"content":"In one of my recent engagements, I had to work out an approach to manage AWS infrastructure across multiple regions, and for various environments, using Terraform. As any sane copy-paste-tweak developer would, I did “google” for inspiration but ended up finding content that solved partially, either only for multi-environment or multi-region scenarios, or wasn’t thought through (for example, no isolation of state between regions). For anyone in a similar need, here’s something to build upon. ","date":"2020-01-02","objectID":"/terraform-setup-multi-environment-region/:0:0","tags":["Devops","Terraform","AWS"],"title":"Maintain multi-environment, multi-region infrastructure on AWS using Terraform","uri":"/terraform-setup-multi-environment-region/"},{"categories":["Infrastructure"],"content":"Prerequisites An understanding of Terraform and the concepts of Modules, Backends, Workspaces, Remote State \u0026 AWS provider would be required to make sense of the content in this post: The following tools would be required to experiment with the provided sample code : AWS Command Line Interface with access to AWS configured Terraform ","date":"2020-01-02","objectID":"/terraform-setup-multi-environment-region/:1:0","tags":["Devops","Terraform","AWS"],"title":"Maintain multi-environment, multi-region infrastructure on AWS using Terraform","uri":"/terraform-setup-multi-environment-region/"},{"categories":["Infrastructure"],"content":"What do we have to play with? ","date":"2020-01-02","objectID":"/terraform-setup-multi-environment-region/:2:0","tags":["Devops","Terraform","AWS"],"title":"Maintain multi-environment, multi-region infrastructure on AWS using Terraform","uri":"/terraform-setup-multi-environment-region/"},{"categories":["Infrastructure"],"content":"Module Terraform’s module system helps us create configurable infrastructure templates that could be reused across various environments (product-a deployed to development/production) or across various products (standard s3/DynamoDB/SNS/etc templates) ","date":"2020-01-02","objectID":"/terraform-setup-multi-environment-region/:2:1","tags":["Devops","Terraform","AWS"],"title":"Maintain multi-environment, multi-region infrastructure on AWS using Terraform","uri":"/terraform-setup-multi-environment-region/"},{"categories":["Infrastructure"],"content":"Backend Terraform’s backend configuration for AWS s3 remote state uses the following configuration variables to organize infrastructure state: bucket: name of the s3 bucket where state would be stored workspace_key_prefix: custom prefix on state file path workspace: name of the workspace key: state file name In s3, state file could then be located at \u003cbucket\u003e/\u003cworkspace_key_prefix\u003e/\u003cworkspace\u003e/\u003ckey\u003e. If we substitute workspace with ap-southeast-1 or ap-southeast-2, if we substitute the variables workspace_key_prefix with product-a and key with terraform.tfstate, we end up with state files stored as: bucket └──product-a ├──ap-southeast-1 │ └── terraform.tfstate └──ap-southeast-2 └── terraform.tfstate This sets up grouping infrastructure states at a product/project level while establishing isolation between deployments to different regions while storing all those states conveniently in one place. ","date":"2020-01-02","objectID":"/terraform-setup-multi-environment-region/:2:2","tags":["Devops","Terraform","AWS"],"title":"Maintain multi-environment, multi-region infrastructure on AWS using Terraform","uri":"/terraform-setup-multi-environment-region/"},{"categories":["Infrastructure"],"content":"Approach Using the terraform module and backend systems, the infrastructure-as-source code repository layout \u0026 Terraform backend configuration snippet described in the section provides us with a way to: establish a structure in which common or a product/project’s infrastructure is templatised for reuse across various enviroments fine tune product/project’s infrastructure at an environment level while even adding environment specific infrastructure for those non-ideal cases maintain state at a region level so that we could have better isolation, canary deploy, etc., Source Layout ├── environments │ ├── development │ | ├── ap-southeast-1.tfvars │ | ├── ap-southeast-2.tfvars │ | ├── variables.tf │ | ├── main.tf │ | ├── provider.tf │ | ├── terraform.tf │ | └── terraform.tfvars │ ├── test │ | ├── ap-southeast-1.tfvars │ | ├── ap-southeast-2.tfvars │ | └── ... │ ├── stage │ | ├── ap-southeast-1.tfvars │ | └── ... │ └── production │ | └── ... └── modules ├── aws-s3 │ ├── main.tf │ ├── provider.tf │ └── variables.tf ├── product-a │ ├── main.tf │ ├── provider.tf │ └── variables.tf └── sub-system-x ├── main.tf ├── provider.tf └── variables.tf environments: folder to isolate various environment (development/test/stage/production) specific configuration. This also helps with flexibility of maintaining environment specific infrastructure for those, common, non-ideal scenarios. modules: folder to host reusable resource sets grouped at product/project or at a sub-system or common infrastructure components level. This folder doesn’t have to exist in the same repository - it does here as an example and might very well serve the purpose of more than handful of usecases. Region specific configurations are managed through their respective \u003cworkpace\u003e.tfvars file. For example, environments/development/ap-southeast-2.tfvars file for ap-southeast-2 region in development environment. Also, terraform.tfvars file found inside development/test/stage/production folder under environments could be used to set common configuration for a given environment, across all regions. Backend Configuration terraform { required_version = \"~\u003e 0.12.6\" backend \"s3\" { bucket = \"terraform-state-bucket\" dynamodb_table = \"terraform-state-lock-table\" encrypt = true key = \"terraform.tfstate\" region = \"ap-southeast-2\" workspace_key_prefix = \"product-a\" } } Note : The configuration described in this post and the included sample presume state bucket per environment. But, if the need is to store state from all environments in a common bucket, we could update workspace_key_prefix value to include environment in it. For example, with product-a/development or product-a/production, we end up with state under following path in s3: bucket └──product-a ├──development │ ├──ap-southeast-1 │ │ └── terraform.tfstate │ └──ap-southeast-2 │ └── terraform.tfstate └──production ├──ap-southeast-1 │ └── terraform.tfstate └──ap-southeast-2 └── terraform.tfstate ","date":"2020-01-02","objectID":"/terraform-setup-multi-environment-region/:3:0","tags":["Devops","Terraform","AWS"],"title":"Maintain multi-environment, multi-region infrastructure on AWS using Terraform","uri":"/terraform-setup-multi-environment-region/"},{"categories":["Infrastructure"],"content":"Repository Source for a sample setup could be found at here. ","date":"2020-01-02","objectID":"/terraform-setup-multi-environment-region/:4:0","tags":["Devops","Terraform","AWS"],"title":"Maintain multi-environment, multi-region infrastructure on AWS using Terraform","uri":"/terraform-setup-multi-environment-region/"},{"categories":["Infrastructure"],"content":"Working with the setup Navigate to the environment folder, development for example, on the terminal. Note: Working configuration to access AWS environment is presumed Initialize terraform To get started, first initialize your local terraform state information terraform init List out the available workspaces terraform workspace list Create a new workspace (if it doesn’t exist already) #terraform workspace new \u003cworkspace-name\u003e terraform workspace new ap-southeast-2 Select a workspace #terraform workspace select \u003cworkspace-name\u003e terraform workspace select ap-southeast-2 Plan \u0026 apply changes #terraform plan -var-file=\u003cworkspace-name\u003e.tfvars #terraform apply -var-file=\u003cworkspace-name\u003e.tfvars terraform plan -var-file=ap-southeast-2.tfvars terraform apply -var-file=ap-southeast-2.tfvars Repeat for other regions For ap-southeast-1 region: terraform workspace new ap-southeast-1 terraform workspace select ap-southeast-1 terraform plan -var-file=ap-southeast-1.tfvars terraform apply -var-file=ap-southeast-1.tfvars Hopefully, this note helps a mate out! ","date":"2020-01-02","objectID":"/terraform-setup-multi-environment-region/:5:0","tags":["Devops","Terraform","AWS"],"title":"Maintain multi-environment, multi-region infrastructure on AWS using Terraform","uri":"/terraform-setup-multi-environment-region/"},{"categories":null,"content":"  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveItHugo Theme LoveIt \" Hugo Theme LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"Features Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes Appearance and Layout / Responsive layout / Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 64 social links supported  Up to 28 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  Utterances comment system supported by Utterances Extended Features  Search supported by Lunr.js or algolia  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightgallery.js  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $ \\KaTeX $  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Dynamic scroll supported by Smooth Scroll  Cookie consent banner supported by cookieconsent … ","date":"2019-08-02","objectID":"/about/:0:1","tags":null,"title":"About LoveIt","uri":"/about/"},{"categories":null,"content":"License LoveIt is licensed under the MIT license. Check the LICENSE file for details. Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css Smooth Scroll autocomplete.js Lunr.js algoliasearch lazysizes object-fit-images Twemoji lightgallery.js clipboard.js Sharer.js TypeIt $ \\KaTeX $ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:0:2","tags":null,"title":"About LoveIt","uri":"/about/"}]